#include<stdio.h>
#include<stdlib.h>


struct node
{
    char data;
    struct node *Right;
    struct node *Left;
};
struct node *MakeNode(char x)
{
    struct node *p;
    p=(struct node *)malloc(sizeof(struct node));
    p->data=x;
    p->Left=NULL;
    p->Right=NULL;
    return p;
}

int PreOrderTraversal(struct node *root)
{
    if(root!=NULL)
    {
        printf("\t%c",root->data);
        PreOrderTraversal(root->Left);
        PreOrderTraversal(root->Right);
    }
}

int InOrderTraversal(struct node *root)
{
    if(root!=NULL)
    {
        InOrderTraversal(root->Left);
        printf("\t%c",root->data);
        InOrderTraversal(root->Right);
    }
}

int PostOrderTraversal(struct node *root)
{
    if(root!=NULL)
    {
        PostOrderTraversal(root->Left);
        PostOrderTraversal(root->Right);
        printf("\t%c",root->data);
    }
}

int CountNode(struct node *root)
{
    if(root==NULL)
        return 0;
    else
        return 1+ CountNode(root->Right) + CountNode(root->Left);
}



void main()
{
    struct node *tree=NULL;
    tree=MakeNode('A');
    tree->Left=MakeNode('B');
    tree->Left->Left=MakeNode('D');
    tree->Right=MakeNode('C');
    tree->Right->Left=MakeNode('E');
    tree->Right->Right=MakeNode('F');
    printf("\nPre Order Traversal is:=");
    PreOrderTraversal(tree);
    printf("\nPost Order Traversal is:=");
    PostOrderTraversal(tree);
    printf("\nIn Order Traversal is :=");
    InOrderTraversal(tree);

    int x= CountNode(tree);
    printf("\n %d",x);
}
